-
  const submit_search_id = "submit-search"
  const search_text_id = "search-text"
  const ignore_case_id = "ignore-case"
  const ignore_accents_id = "ignore-accents"
  const search_input_id = "search-input"
  const regex_id = "regex"
  const search_tags = ['Hexo', 'JavaScript', 'HTML', 'Pag']
  const search_input = {id: "#{search_input_id}", text: "#{search_input_id}-text", ignore_case: 'ignore-case', }

datalist#tags
 each item in search_tags
  option(value=item) 

div(id=search_input_map.id)
  label Enter search text:
    input(id=search_input.text, type="search", name=search_text_id, size='20', minlength='1', maxlength='255', placeholder='keyword')
  input(id=ignore_case_id, type="checkbox", checked)
  label(for=ignore_case_id) Ignore case
  input(id=ignore_accents_id, type="checkbox" checked)
  label(for=ignore_accents_id) Ignore accents
  input(id=regex_id, type="checkbox" )
  label(for=regex_id) Regular expression
  button(id=submit_search_id, onClick="search()") Search
// div(id=search_result_output_id)


-
  const search_result_container_map = {id: "search-result-container", heading: "heading", entries: "entries"}
  const search_result_container_id = search_result_container_map.id 
  const search_result_container_heading = search_result_container_map.heading 
  const search_result_container_entries = search_result_container_map.entries 
  const search_result_name = "search-result"
  const search_entries_name = "search-entries"
  const search_result_entry_map = {id: "search-result-entry", url: 'entry-url', title: 'entry-title', date: 'entry-date', content: 'entry-content'}
  const search_result_entry_id = search_result_entry_map.id;

template(id=search_result_container_map.id)
  div(id=search_result_container_map.id)
    h2(class=search_result_container_map.heading)
      slot(name=search_result_container_map.heading) (Search result)
    ul(class=search_result_container_map.entries)
      slot(name=search_result_container_map.entries)

template(id=search_result_entry_map.id)
  li(class=search_result_entry_map.id, slot=search_result_container_map.entries)
    a(class=search_result_entry_map.url)
      span(class=search_result_entry_map.title)
    time(class=search_result_entry_map.date)
    p(class=search_result_entry_map.content, data-length=200)
    img.thumbnail

script(type="module").
  customElements.define(
  "#{search_result_container_map.id}",
  class extends HTMLElement {
    constructor() {
      super();
      const template = document.getElementById("#{search_result_container_map.id}");
      console.assert(template instanceof HTMLElement, `no template!`);
      const templateContent = template.content;
      console.assert(templateContent instanceof DocumentFragment, `no template content`);
      const _shadowRoot = this.attachShadow({mode: 'open'});
      console.assert(_shadowRoot, `attach shadow failed!`);
      const cloned = templateContent.cloneNode(true);
      console.assert(cloned, `clone node failed!`);
      const child = _shadowRoot.appendChild(cloned);
      console.assert(child, `append cloned:${cloned} failed!`)
      console.debug(`shadow root(${_shadowRoot}) appended a cloned child(${cloned}).`);
    }
  }
  );


#{search_result_container_map.id}(id=search_result_container_map.id, style="color: blue;")
//- span(slot=search_result_container_map.heading, class=search_result_container_map.heading) Slotted search result:
//- li(slot=search_result_container_map.entries, class=search_result_container_map.entries) entry 1

script(type="module").
  import {exec_search, fetchData} from "/js/analyze-data.js";
  const search_button = document.querySelector("##{search_input_id} > button:last-of-type")
  debugger;
  search_button.addEventListener('click', (event) => {
    const input = document.querySelector("##{search_input_id} #{search_text_id}");
  console.assert (input instanceof HTMLInputElement, `No ${search_text_id}`);
  if (input.value) {
    console.debug(`Input text is set as: "${input.value}"`);
    const ignore_case_element = document.getElementById("#{ignore_case_id}");
    console.assert (ignore_case_element instanceof HTMLInputElement, `No ${ignore_case_id} !`);
    const ignore_case = ignore_case_element.checked ? true : false;
    console.debug(`Ignore case is set as: ${ignore_case}`);
    const ignore_accents_element = document.getElementById("#{ignore_accents_id}");
    console.assert (!ignore_accents_element instanceof HTMLInputElement,`No ${ignore_accents_id} !`);
    const ignore_accents = ignore_accents_element.checked ? true : false;
    console.debug(`Ignore accents is set as: ${ignore_accents}`);
    const regex_element = document.querySelector("");
  exec_search(fetchData(), input.value, {ignore_case, ignore_accents}, 
   {id: "#{search_result_container_map.id}",
    heading: "#{search_result_container_map.heading}",
    entries: "#{search_result_container_map.entries}"},
    {id: "#{search_result_entry_map.id}",
     title: "#{search_result_entry_map.title}",
     date: "#{search_result_entry_map.date}",
     content: "#{search_result_entry_map.content}"});
  }
  else
    console.log(`No input text.`);
    // event.preventDefault(); // prevent to sent this form itself URL
  }, {
    capture: false,
    once: true,
    passive: false
  });

