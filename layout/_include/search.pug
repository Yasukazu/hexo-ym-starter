-
  const submit_search_id = "submit-search"
  const search_text_id = "search-text"
  const ignore_case_id = "ignore-case"
  const ignore_accents_id = "ignore-accents"
  const search_input_id = "search-input"
  const search_result_output_id = "search-result-output"
  const search_result_container_id = "search-result-container"
  const search_result_entry_id = "search-result-entry"

script(type="module").
  import {exec_search, fetchData} from "/js/analyze-data.js";

  function search() {
  const input = document.getElementById("#{search_text_id}");
  if (!input)
    throw Error(`No ${search_text_id}`);
  if (input.value) {
    console.log(`Input text is set as: "${input.value}"`);
    const ignore_case_element = document.getElementById("#{ignore_case_id}");
    if (!ignore_case_element)
      throw Error(`No ${ignore_case_id} !`);
    const ignore_case = ignore_case_element.checked ? true : false;
    console.log(`Ignore case is set as: ${ignore_case}`);
    const ignore_accents_element = document.getElementById("#{ignore_accents_id}");
    if (!ignore_accents_element)
      throw Error(`No ${ignore_accents_id} !`);
    const ignore_accents = ignore_accents_element.checked ? true : false;
    console.log(`Ignore accents is set as: ${ignore_accents}`);
    exec_search(fetchData(), input.value, {ignore_case, ignore_accents});
  }
  else
    console.log(`No input text.`);
  }
  const submit_button = document.getElementById("#{submit_search_id}");
  if (!submit_button) {
    Error(`No submit_button`);
  }
  else {
    submit_button.onclick = search;
    console.log(`submit_button.onclick is set to function search()`)
  }
  

div(id=search_input_id)
  label(for=search_text_id) Enter search text:
  input(id=search_text_id, type="text", name=search_text_id)
  input(id=ignore_case_id, type="checkbox", checked)
  label(for=ignore_case_id) Ignore case
  input(id=ignore_accents_id, type="checkbox" checked)
  label(for=ignore_accents_id) Ignore accents
  button(id=submit_search_id, onClick="search()") Search
// div(id=search_result_output_id)

- var search_result_name = "search-result"
- var search_entries_name = "search-entries"

template(id=search_result_container_id)
  div(id=search_result_container_id)
    h2 
      slot(name=search_result_name) (Search result)
    ul.entries
      slot(name=search_entries_name)

template(id=search_result_entry_id)
  li(class=search_result_entry_id)
    a.title #[slot(name='title')]
    time.date #[slot(name='date')]
    p(data-length=200).content #[slot(name='content')]
    img.thumbnail

script(type="module").
  //- import {defineCustomElementFromTemplateId} from '/js/custom-element.js'
  customElements.define(
  "#{search_result_container_id}",
  class extends HTMLElement {
    constructor() {
      super();
      const template = document.getElementById("#{search_result_container_id}");
      console.assert(template, `no template!`);
      const templateContent = template.content;
      console.assert(`no template content`);
      const _shadowRoot = this.attachShadow({mode: 'open'});
      console.assert(_shadowRoot, `attach shadow failed!`);
      const cloned = templateContent.cloneNode(true);
      console.assert(cloned, `clone node failed!`);
      _shadowRoot.appendChild(cloned);
      console.debug(`shadow root(${_shadowRoot}) appended a cloned child(${cloned}).`);
    }
  }
  );

#{search_result_container_id}(id=search_result_container_id, style="color: red;")
  span(slot=search_result_name, class=search_result_name) Slotted search result:
  li(slot=search_entries_name, class=search_entries_name) item 1


// change search_result_name slot
script(type="module").
  const search_result_container = document.querySelector("#{search_result_container_id}");
  console.assert(search_result_container, "Failed to get search_result_container!");
  const search_result = document.querySelector("#{search_result_container_id} > .#{search_result_name}");
  console.assert(search_result, "Failed to get search_result!");
  search_result.innerText = "New search result.";
  const search_entries = document.querySelector("#{search_result_container_id} > .#{search_entries_name}");
  console.assert(search_entries, "Failed to get search_entries!");
  search_result_container.removeChild(search_entries);
  console.debug("Removed search_entries.")
  let new_item = document.createElement('li');
  console.assert(new_item, "create li failed!");
  new_item.setAttribute('slot', '#{search_entries_name}');
  new_item.setAttribute('class', '#{search_entries_name}');
  new_item.innerText = 'new item 1';
  let child = search_result_container.appendChild(new_item);
  console.assert(child, "appended child 1");
  new_item = document.createElement('li');
  console.assert(new_item, "create li failed!");
  new_item.setAttribute('slot', '#{search_entries_name}');
  new_item.setAttribute('class', '#{search_entries_name}');
  new_item.innerText = 'new item 2';
  child = search_result_container.appendChild(new_item);
  console.assert(child, "appended child 2");
  // search_result.innerHTML = "New search result.";