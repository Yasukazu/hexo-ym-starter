-
  const submit_search_id = "submit-search"
  const search_text_id = "search-text"
  const ignore_case_id = "ignore-case"
  const ignore_accents_id = "ignore-accents"
  const search_input_id = "search_input"
  const regex_id = "regex"
  const search_tags = ['Hexo', 'JavaScript', 'HTML', 'Pag']
  const search_input = {id: "#{search_input_id}", text: "#{search_input_id}-text", ignore_case: '#{search_input_id}-ignore-case', ignore_accents: '#{search_input_id}-ignore-accents', regex: '#{search_input_id}-regex', button: '#{search_input_id}-button'}

datalist#tags
 each item in search_tags
  option(value=item) 

form(id=search_input.id, onsubmit='return search()')
  label(for=search_input.text) Enter search text:
    input(id=search_input.text, type="search", name=search_input.text, size='20', minlength='1', maxlength='255', placeholder='keyword')
  input(id=search_input.ignore_case, type="checkbox", checked)
  label(for=search_input.ignore_case) Ignore case
  input(id=search_input.ignore_accents, type="checkbox" checked)
  label(for=search_input.ignore_accents) Ignore accents
  input(id=search_input.regex, type="checkbox" )
  label(for=search_input.regex) Regular expression
  button(id=search_input.button, type='button', onClick="search()") Search

-
  const search_result_container_map = {id: "search-result-container", heading: "heading", entries: "entries"}
  const search_result_container_id = search_result_container_map.id 
  const search_result_container_heading = search_result_container_map.heading 
  const search_result_container_entries = search_result_container_map.entries 
  const search_result_name = "search-result"
  const search_entries_name = "search-entries"
  const search_result_entry_map = {id: "search-result-entry", url: 'entry-url', title: 'entry-title', date: 'entry-date', content: 'entry-content'}
  const search_result_entry_id = search_result_entry_map.id;

template(id=search_result_container_map.id)
  div(id=search_result_container_map.id)
    h2(class=search_result_container_map.heading)
      slot(name=search_result_container_map.heading) (Search result)
    ul(class=search_result_container_map.entries)
      slot(name=search_result_container_map.entries)

template(id=search_result_entry_map.id)
  li(class=search_result_entry_map.id, slot=search_result_container_map.entries)
    a(class=search_result_entry_map.url)
      span(class=search_result_entry_map.title)
    time(class=search_result_entry_map.date)
    p(class=search_result_entry_map.content, data-length=200)
    img.thumbnail

script(type="module").
  customElements.define(
  "#{search_result_container_map.id}",
  class extends HTMLElement {
    constructor() {
      super();
      const template = document.getElementById("#{search_result_container_map.id}");
      console.assert(template instanceof HTMLElement, `no template!`);
      const templateContent = template.content;
      console.assert(templateContent instanceof DocumentFragment, `no template content`);
      const _shadowRoot = this.attachShadow({mode: 'open'});
      console.assert(_shadowRoot, `attach shadow failed!`);
      const cloned = templateContent.cloneNode(true);
      console.assert(cloned, `clone node failed!`);
      const child = _shadowRoot.appendChild(cloned);
      console.assert(child, `append cloned:${cloned} failed!`)
      console.debug(`shadow root(${_shadowRoot}) appended a cloned child(${cloned}).`);
    }
  }
  );


#{search_result_container_map.id}(id=search_result_container_map.id, style="color: blue;")

script(type="module").
  import {exec_search, fetchData} from "/js/analyze-data.js";

  function search() {
    const search_result_container_map = {id: "search-result-container", heading: "heading", entries: "entries"};
    const search_result_entry_map = {id: "search-result-entry", url: 'entry-url', title: 'entry-title', date: 'entry-date', content: 'entry-content'}
    const search_input = {id: "#{search_input_id}", text: "#{search_input_id}-text", ignore_case: '#{search_input_id}-ignore-case', ignore_accents: '#{search_input_id}-ignore-accents', regex: '#{search_input_id}-regex', button: '#{search_input_id}-button'};
    debugger;
    exec_search(fetchData(), input.value, search_result_container_map, search_result_entry_map, search_input);
    return false;
  }
